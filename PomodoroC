#!/usr/bin/env python

from datetime import datetime
import time
import os
from gi.repository import AppIndicator3 as ap
from gi.repository import Gtk as gtk
from gi.repository import Notify as notify
from gi.repository import GLib as glib
import sys
import pygame

class Pomodoro:
	def __init__(self, time_limit, short_interval, long_interval):
		"""
		Initializing function
		"""
		self.time_limit = time_limit
		self.state = "stopped"
		self.short_interval = short_interval
		self.long_interval = long_interval
		self.number_of_pomodoros = 0
		self.elapsed_time = 0
		self.previous_state = None

	def timer(self):
		"""
		Timer function. Adds 1 each second to the elapsed time. 
		Returns True if timer is below the timer.
		If the elapsed timer is greater or equal to the timer, sets
		the elapsed timer to 0 and returns False.
		"""
		self.elapsed_time += 1
		if self.elapsed_time > self.time_limit:
			self.elapsed_time = 0
			return False
		return True

	def start(self):
		"""
		Start function.
		Changes states.
		"""
		self.state = "running"
		if not self.timer():
			self.state = "stopped"
			self.previous_state = "running"
			self.elapsed_time = 0
			self.number_of_pomodoros += 1
			return True
		return False

	def stop(self):
		"""
		Stop function
		Changes states and enters interval.
		"""
		if self.previous_state == "running":
			if self.number_of_pomodoros % 4 == 0:
				self.elapsed_time = 0
				self.interval(self.long_interval)
			else:
				self.elapsed_time = 0
				self.interval(self.short_interval)

	def pause(self):
		self.previous_state = self.state
		self.state = "paused"
		
	def resume(self):
		self.state = self.previous_state
		self.previous_state = "paused"

	def repres(self):
		"""
		Representation of the elapsed time in the correct format
		"""
		minutes = self.elapsed_time / 60
		seconds = self.elapsed_time - minutes * 60
		return "%02d:%02d" %(minutes,seconds)

class Indicator:

	def __init__(self):
		self.pomodoro = Pomodoro(10, 300, 900)
		pygame.init()
		self.ind = ap.Indicator.new("pomodoro", os.path.abspath("tomato.png"), ap.IndicatorCategory.APPLICATION_STATUS)
		self.ind.set_status(ap.IndicatorStatus.ACTIVE)
		self.menu_setup()
		self.ind.set_menu(self.menu)
		self.timer = None
		notify.init("pomodoro")


	def menu_setup(self):
		self.menu = gtk.Menu()
		self.quitSeparator = gtk.SeparatorMenuItem()
		self.timer_item = gtk.MenuItem("00:00")
		self.start_item = gtk.MenuItem("Start")
		self.stop_item = gtk.MenuItem("Stop")
		self.pause_item = gtk.MenuItem("Pause")
		self.resume_item = gtk.MenuItem("Resume")
		self.quit_item = gtk.MenuItem("Quit")

		self.menuStates = {"stopped": [self.start_item, self.quit_item], "running": [self.timer_item, self.pause_item, self.stop_item, self.quit_item], "paused" : [self.timer_item, self.resume_item, self.stop_item, self.quit_item]}
		
		self.hidable_item = [self.timer_item, self.start_item, self.pause_item, self.resume_item, self.stop_item]

		self.start_item.connect("activate", self.start)
		self.stop_item.connect("activate", self.stop)
		self.pause_item.connect("activate", self.pause)
		self.resume_item.connect("activate", self.resume)
		self.quit_item.connect("activate", self.quit)
        
		self.menu_items = [self.start_item, self.pause_item, self.resume_item, self.stop_item, self.quitSeparator, self.quit_item]

 		for i in self.menu_items:
			i.show()
			self.menu.append(i)
	
	def update_timer(self):
		timer = self.pomodoro.timer() #adds to the elapsed_time
		if timer:
			self.timer_item.set_label(self.pomodoro.repres()) #changes the label of the timer_item
		return timer #for the timeout to work the callback function has to return True.

	def hide_all(self):
		for i in self.hidable_item:
			i.hide()

	def menu_redraw(self):
		self.hide_all()
		state = self.pomodoro.state
		for i in self.menuStates[state]:
			i.show()

	def start(self, widget):
		self.menu_redraw()
		self.pomodoro.start()
		notify.Notification.new("Pomodoro Started", "Pomodoro will end at " + time.strftime("%H:%M:%S", time.gmtime(time.time() + 1800))).show()
		self.timer = glib.timeout_add_seconds(1, self.update_timer)

	def resume(self, widget):
		self.pomodoro.resume()
		self.menu_redraw()
		self.timer = glib.timeout_add_seconds(1, self.update_timer)
	
	def pause(self, widget):
		self.pomodoro.pause()
		self.menu_redraw()
		glib.source_remove(self.timer)

	def stop(self, widget):
		self.pomodoro.stop()
		self.menu_redraw()
		notify.Notification.new("Pomodoro Ended").show()
		pygame.mixer.music.load("ding.mp3")
		pygame.mixer.music.play()
		glib.source_remove(self.timer)
		self.pomodoro.elapsed_time = 0
		self.timer_item.set_label("00:00")

	def quit(self, widget):
		sys.exit(0)

	def main(self):
		gtk.main()


if __name__ == '__main__':
	indicator = Indicator()
	indicator.main()