#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""


"""

from datetime import datetime
import time
import os
from gi.repository import AppIndicator3 as ap
from gi.repository import Gtk as gtk
from gi.repository import Notify as notify
from gi.repository import GLib as glib
import sys
import pygame

class Pomodoro:

	def __init__(self, time_limit, short_interval, long_interval):
		"""
		Pomodoro class initializer.

		Args:
			time_limit (int): Duration of a pomodoro.
			short_interval (int): Duration of the short interval
			long_interval (int): Duration of the long interval
		
		"""

		self.pomodoro_time = time_limit
		self.time_limit = 0
		self.short_interval = short_interval
		self.long_interval = long_interval
		self.number_of_pomodoros = 0
		self.elapsed_time = 0

	def timer(self):
		"""
		This function adds 1 to the elapsed_time.

		Returns:
			True if the elapsed_time is lower than the time_limit, False otherwise.

		"""

		self.elapsed_time += 1
		if self.elapsed_time > self.time_limit:
			self.elapsed_time = 0
			return False
		return True

	def start(self):
		"""
		Starts a new pomodoro.
		"""

		self.time_limit = self.pomodoro_time
		self.elapsed_time = 0

	def format(self):
		"""
		Formats the elapsed_time to the appropriate label format.

		Retruns:
			A string with the format : Minutes : Seconds.
		"""

		minutes = self.elapsed_time / 60
		seconds = self.elapsed_time	- minutes * 60
		return "%02d:%02d"  % (minutes, seconds)


class Indicator:
	def __init__(self):
		"""
		Indicator class intiializer. 
		The main class in the script.
		"""

		self.pomodoro = Pomodoro(10, 300, 900)
		pygame.init()
		notify.init("pomodoro")
		self.ind = ap.Indicator.new("pomodoro", os.path.abspath("tomato.png"), ap.IndicatorCategory.APPLICATION_STATUS)
		self.ind.set_status(ap.IndicatorStatus.ACTIVE)
		self.menu_setup()
		self.ind.set_menu(self.menu)
		self.timer = None

	def menu_setup(self):
		"""
		Creates the menu.

		Also creates the several states that the script might have.
		"""

		self.menu = gtk.Menu()
		self.timer_separator = gtk.SeparatorMenuItem()
		self.timer_item = gtk.MenuItem("00:00")
		self.quit_separator = gtk.SeparatorMenuItem()
		self.quit_item = gtk.MenuItem("Quit")
		self.start_item = gtk.MenuItem("Start")
		self.stop_item = gtk.MenuItem("Stop")
		self.pause_item = gtk.MenuItem("Pause")
		self.resume_item = gtk.MenuItem("Resume")

		self.menu_states = {"stopped": [self.start_item, self.quit_separator, self.quit_item], 
							"running": [self.timer_item, self.timer_separator, self.pause_item, self.stop_item, self.quit_separator, self.quit_item],
							"paused": [self.timer_item, self.timer_separator, self.resume_item, self.quit_separator, self.quit_item],
							"interval": [self.timer_item, self.timer_separator, self.start_item, self.quit_separator, self.quit_item]}

		self.start_item.connect("activate", self.start)
		self.pause_item.connect("activate", self.pause)
		self.resume_item.connect("activate", self.resume)
		self.stop_item.connect("activate", self.stop)
		self.quit_item.connect("activate", self.quit)

		self.menu_items = [self.timer_item, self.timer_separator, self.start_item, self.pause_item, self.resume_item, self.stop_item, self.quit_separator, self.quit_item]
		for i in self.menu_items:
			self.menu.append(i)

		for i in self.menu_states["stopped"]:
			i.show()

	def hide_all(self):
		"""
		Hides all the menu items.
		"""

		for i in self.menu_items:
			i.hide()

	def update_menu(self, state):
		"""
		Updates the menu given a state.

		Args:
			state (str): A String with the name of a state. 
		"""

		for i in self.menu_states[state]:
			i.show()

	def update_timer(self):
		"""
		Updates the label of the timer_item.

		Returns:
			True while the timer doesn't end. False otherwise.
		"""

		time = self.pomodoro.timer()
		if time:
			self.timer_item.set_label(self.pomodoro.format())
			return True
		return False

	def start(self, widget):
		"""
		This function is connected to the Start button in the menu.
		Start a new pomodoro, updates the menu, and notifies the user.
		"""

		self.hide_all()
		self.update_menu("running")
		self.pomodoro.start()
		notify.Notification.new("Pomodoro Started", "Pomodoro will end at " + time.strftime("%H:%M:%S", time.gmtime(time.time() + 1800))).show()
		self.timer = glib.timeout_add_seconds(1, self.update_timer)

	def pause(self, widget):
		"""
		This function is connected to the Pause button in the menu.
		"Pauses" the timer, and changes the menu state to "paused". 
		"""

		self.hide_all()
		self.update_menu("paused")
		pass

	def resume(self, widget):
		"""
		This function is connected to the Resume button in the menu.
		Resumes the timer, and changes the menu state to "running"
		"""

		self.hide_all()
		self.update_menu("running")
		pass

	def stop(self, widget):
		"""
		This function is connected to the Stop button in the menu.
		Stops the current pomodoro, changes the menu state to "stopped", and notifies the user.
		"""

		self.hide_all()
		self.update_menu("stopped")
		pass

	def quit(self, widget):
		"""
		This function is connected to the Quit button in the menu.
		Exits the script.
		"""

		sys.exit(0)

	def main(self):
		"""
		Main function in the script.
		Starts the GTK.
		"""

		gtk.main()

if __name__ == '__main__':
	ind = Indicator()
	ind.main()


