#!/usr/bin/env python

from datetime import datetime
import time
import os
from gi.repository import AppIndicator3 as ap
from gi.repository import Gtk as gtk
from gi.repository import Notify as notify
import sys
import signal

INDICATOR_ID = "PomodorIndicator"

class Pomodor:
	def __init__(self):
		self.ind = ap.Indicator.new(INDICATOR_ID, os.path.abspath("tomato.png"), ap.IndicatorCategory.SYSTEM_SERVICES)
		self.ind.set_status(ap.IndicatorStatus.ACTIVE)
		self.start_item = gtk.MenuItem("Start")
		self.stop_item = gtk.MenuItem("Stop")
		self.quit_item = gtk.MenuItem("Quit")
		self.array = {"Start": (self.start, self.start_item), "Stop": (self.stop, self.stop_item), "Quit": (self.quit, self.quit_item)}
		self.menu = gtk.Menu()
		self.menu_setup(self.array)
		self.ind.set_menu(self.menu)

	def menu_setup(self, array):
		for i in self.array:
			self.array[i][1].connect("activate", self.array[i][0])
			self.menu.append(self.array[i][1])
		self.menu.show_all()

	def main(self):
		notify.init(INDICATOR_ID)
		gtk.main()

	def start(self, widget):
		end = time.time() + 30
		self.timer_item = gtk.MenuItem("00:00")
		notify.Notification.new("Pomodoro Started", "Pomodoro will end at " + time.ctime(end)[10:-5]).show()
		self.array["Timer"] = (self.timer, self.timer_item)
		self.menu_setup(self.array)
		self.start_item.do_activate(self.timer_item)
		print "sim"

	def stop(self, widget):
		self.timer_item.deactivate()
		notify.Notification.new("Pomodoro Ended", "You finished a pomodoro").show()

	def quit(self, widget):
		sys.exit(0)

	def timer(self,widget):
		self.timer_item.activate()
		timer = time.time()
		while timer < timer + 3:
			print time.ctime(timer)
			time.sleep(1)
			timer += 1


if __name__ == '__main__':
	indicator = Pomodor()
	indicator.main()